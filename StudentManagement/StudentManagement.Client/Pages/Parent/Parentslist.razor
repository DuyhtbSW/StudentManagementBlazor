@page "/parents-list"
@using StudentManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Parents List</h3>
                <input type="text" @bind="searchTerm" @oninput="ApplyFilters" placeholder="Search..." class="form-control" />
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-parent"> Add New Parent </a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (PagedParents.Any())
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th @onclick="() => SortByColumn(nameof(Parent.Id))">Id</th>
                                                <th @onclick="() => SortByColumn(nameof(Parent.FirstName))">FirstName</th>
                                                <th @onclick="() => SortByColumn(nameof(Parent.MiddleName))">MiddleName</th>
                                                <th @onclick="() => SortByColumn(nameof(Parent.LastName))">LastName</th>
                                                <th @onclick="() => SortByColumn(nameof(Parent.EmailAddress))">Email</th>
                                                <th @onclick="() => SortByColumn(nameof(Parent.PhoneNumber))">PhoneNo</th>
                                                <th @onclick="() => SortByColumn(nameof(Parent.Student.FullName))">Student</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var parent in PagedParents)
                                            {
                                                <tr>
                                                    <td>@parent.Id</td>
                                                    <td>@parent.FirstName</td>
                                                    <td>@parent.MiddleName</td>
                                                    <td>@parent.LastName</td>
                                                    <td>@parent.EmailAddress</td>
                                                    <td>@parent.PhoneNumber</td>
                                                    <td>@parent.Student.FullName</td>
                                                    <td>
                                                        <a class="btn btn-success" href="/parent/edit/@parent.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-danger" href="/parent/delete/@parent.Id"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <div class="pagination">
                                        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                                        <span>Page @currentPage of @totalPages</span>
                                        <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info"> There is not Parents List Availlable</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Parent> AllParents { get; set; } = new();
    public List<Parent> PagedParents { get; set; } = new();
    public string searchTerm { get; set; } = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)FilteredParents.Count / pageSize);

    private string currentSortColumn = nameof(Parent.Id);
    private bool isSortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllParents();
    }

    public async Task LoadAllParents()
    {
        var parents = await ParentService.GetAllAsync();
        AllParents.Clear();
        if (parents is not null)
        {
            AllParents.AddRange(parents);
        }
        ApplyFilters();
    }

    private List<Parent> FilteredParents => string.IsNullOrEmpty(searchTerm)
        ? AllParents
        : AllParents.Where(p => p.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                               p.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                               p.EmailAddress.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    private void ApplyFilters()
    {
        var sortedParents = SortParents(FilteredParents);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        PagedParents = sortedParents
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
        StateHasChanged();
    }

    private List<Parent> SortParents(List<Parent> parents)
    {
        Func<Parent, object> keySelector = currentSortColumn switch
        {
            nameof(Parent.FirstName) => p => p.FirstName,
            nameof(Parent.MiddleName) => p => p.MiddleName,
            nameof(Parent.LastName) => p => p.LastName,
            nameof(Parent.EmailAddress) => p => p.EmailAddress,
            nameof(Parent.PhoneNumber) => p => p.PhoneNumber,
            nameof(Parent.Student.FullName) => p => p.Student.FullName,
            _ => p => p.Id,
        };

        return isSortAscending ? parents.OrderBy(keySelector).ToList() : parents.OrderByDescending(keySelector).ToList();
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isSortAscending = !isSortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isSortAscending = true;
        }
        ApplyFilters();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyFilters();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyFilters();
        }
    }

    private void EditParent(int id)
    {
        navigation.NavigateTo($"/parent/edit/{id}");
    }

    private async Task DeleteParent(int Id)
    {
        var result = await ParentService.DeleteAsync(Id);
        await LoadAllParents();
    }
}
