@page "/return/edit/{id:int}"
@using StudentManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Return  Book </h3>
            </div>
            <div class="card-body">
                <div class="col-md-12">
                    <EditForm Model="issuranceobj" OnValidSubmit="ReturnBookIssurance" FormName="returnbookissurance">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="col-md-12">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label"> Issue Date </label>
                                        <InputDate for="IssueDate" class="form-control" @bind-Value="@issuranceobj.IssueDate"></InputDate>
                                        <ValidationMessage For="() => issuranceobj.IssueDate" />

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label"> Due Date </label>
                                        <InputDate for="DueDate" class="form-control" @bind-Value="@issuranceobj.DueDate"></InputDate>
                                        <ValidationMessage For="() => issuranceobj.DueDate" />

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label"> Return Date </label>
                                        <InputDate for="ReturnDate" class="form-control" @bind-Value="@issuranceobj.ReturnDate" @onfocus="SetReturnDateToToday" />
                                        <ValidationMessage For="() => issuranceobj.ReturnDate" />


                                    </div>
                                </div>


                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label">Class</label>
                                        <InputSelect for="GenderId" class="form-control" @bind-Value="@issuranceobj.ClassId">
                                            <option value="">Select Class</option>
                                            @if (Class != null && Class.Any())
                                            {
                                                @foreach (var item in Class)
                                                {
                                                    <option value="@item.id">@item.Description</option>
                                                }

                                            }
                                        </InputSelect>
                                        <ValidationMessage For="() => issuranceobj.ClassId" />

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label"> Book Type</label>
                                        <InputSelect for="BookId" class="form-control" @bind-Value="@issuranceobj.BookId">
                                            <option value="">Select Book Type</option>

                                            @foreach (var type in Books)
                                            {
                                                <option value="@type.Id"> @type.Name</option>
                                            }


                                        </InputSelect>
                                        <ValidationMessage For="() => issuranceobj.BookId" />

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label"> Student</label>
                                        <InputSelect for="StudentId" class="form-control" @bind-Value="@issuranceobj.StudentId">
                                            <option value="">Select Student</option>
                                            @foreach (var student in Students)
                                            {

                                                <option value="@student.Id"> @student.FullName</option>


                                            }
                                        </InputSelect>
                                        <ValidationMessage For="() => issuranceobj.StudentId" />

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label"> Note  </label>
                                        <InputTextArea for="Notes" class="form-control" @bind-Value="@issuranceobj.Notes"></InputTextArea>
                                        <ValidationMessage For="() => issuranceobj.Notes" />

                                    </div>
                                </div>
                            </div>
                            <div class="form-group mt-4">
                                <button type="submit" class="btn btn-primary">Save Return Details</button>
                                <button type="button" @onclick="()=>Cancel()" class="btn btn-danger">Back to List</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    [SupplyParameterFromForm]
    public BookIssuance issuranceobj { get; set; } = new();
    public List<SystemCodeDetail> Class = new List<SystemCodeDetail>();
    List<Book> Books = new List<Book>();
    List<Student> Students = new List<Student>();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        issuranceobj = await IssuranceService.GetByIdAsync(id);
        Class = await SystemCodeDetailService.GetByCodeAsync("Class");
        Books = await BookService.GetAllAsync();
        Students = await StudentService.GetAllStudentsAsync();
    }

    protected async Task ReturnBookIssurance()
    {
        var result = await IssuranceService.UpdateAsync(issuranceobj);
        navigation.NavigateTo("/issurancehistory-list");
    }
    public void Cancel()
    {
        navigation.NavigateTo("/issurancehistory-list");
    }
    private void SetReturnDateToToday()
    {
        issuranceobj.ReturnDate = DateTime.Today;
    }

}
