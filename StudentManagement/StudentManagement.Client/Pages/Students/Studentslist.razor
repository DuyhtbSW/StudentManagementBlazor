@page "/students-list"
@using StudentManagement.Shared.Models
@inject NavigationManager navigation;
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Students List</h3>
                <input type="text" @bind="searchTerm" @oninput="ApplyFilters" placeholder="Search..." class="form-control" />
            </div>
            <div class="card-body">
                <div class="row">
                    <p><a class="btn btn-success float-end" href="/add-student"> Add New Student </a></p>
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header"></div>
                            @if (AllStudents == null)
                            {
                                <p><em>Loading Students...</em></p>
                            }
                            else if (PagedStudents.Any())
                            {
                                <div class="card-body">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th @onclick="() => SortByColumn(nameof(Student.Id))">Id</th>
                                                <th @onclick="() => SortByColumn(nameof(Student.FirstName))">FirstName</th>
                                                <th @onclick="() => SortByColumn(nameof(Student.MiddleName))">MiddleName</th>
                                                <th @onclick="() => SortByColumn(nameof(Student.LastName))">LastName</th>
                                                <th @onclick="() => SortByColumn(nameof(Student.EmailAddress))">Email</th>
                                                <th @onclick="() => SortByColumn(nameof(Student.PhoneNumber))">PhoneNo</th>
                                                <th @onclick="() => SortByColumn(nameof(Student.Country.Name))">Country</th>
                                                <th>Edit</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var student in PagedStudents)
                                            {
                                                <tr>
                                                    <td>@student.Id</td>
                                                    <td>@student.FirstName</td>
                                                    <td>@student.MiddleName</td>
                                                    <td>@student.LastName</td>
                                                    <td>@student.EmailAddress</td>
                                                    <td>@student.PhoneNumber</td>
                                                    <td>@(student.Country?.Name ?? "-")</td>

                                                    <td>
                                                        <a class="btn btn-success" href="/student/edit/@student.Id"> Edit </a>
                                                    </td>
                                                    <td>
                                                        <a class="btn btn-danger" @onclick="() => DeleteStudent(student.Id)"> Delete </a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <div class="pagination">
                                        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                                        <span>Page @currentPage of @totalPages</span>
                                        <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info"> There is no Students List Available</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Student> AllStudents { get; set; } = new();
    public List<Student> PagedStudents { get; set; } = new();
    public string searchTerm { get; set; } = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)FilteredStudents.Count / pageSize);

    private string currentSortColumn = nameof(Student.Id);
    private bool isSortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllStudents();
    }

    public Student student = new Student();

    public async Task LoadAllStudents()
    {
        var students = await StudentService.GetAllStudentsAsync();
        AllStudents.Clear();
        if (students != null)
        {
            AllStudents.AddRange(students);
        }
        ApplyFilters();
    }

    private List<Student> FilteredStudents => string.IsNullOrEmpty(searchTerm)
        ? AllStudents
        : AllStudents.Where(s => s.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                  s.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                  s.EmailAddress.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    private void ApplyFilters()
    {
        var sortedStudents = SortStudents(FilteredStudents);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        PagedStudents = sortedStudents
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
        StateHasChanged();
    }

    private List<Student> SortStudents(List<Student> students)
    {
        Func<Student, object> keySelector = currentSortColumn switch
        {
            nameof(Student.FirstName) => s => s.FirstName,
            nameof(Student.MiddleName) => s => s.MiddleName,
            nameof(Student.LastName) => s => s.LastName,
            nameof(Student.EmailAddress) => s => s.EmailAddress,
            nameof(Student.PhoneNumber) => s => s.PhoneNumber,
            nameof(Student.Country.Name) => s => s.Country?.Name,
            _ => s => s.Id,
        };

        return isSortAscending ? students.OrderBy(keySelector).ToList() : students.OrderByDescending(keySelector).ToList();
    }

    private void SortByColumn(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isSortAscending = !isSortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isSortAscending = true;
        }
        ApplyFilters();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyFilters();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyFilters();
        }
    }

    private void EditStudent(int id)
    {
        navigation.NavigateTo($"/student/edit/{id}");
    }

    private async Task DeleteStudent(int id)
    {
        var result = await StudentService.DeleteStudentAsync(id);
        await LoadAllStudents();
    }
}
